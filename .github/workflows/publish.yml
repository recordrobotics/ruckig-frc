name: Build and Publish JNI Library

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-native:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: windows
            cross: false
          - os: macos-latest
            target: macos
            cross: false
          - os: ubuntu-latest
            target: linux
            cross: false
          - os: ubuntu-latest
            target: athena
            cross: true
            toolchain_url: https://github.com/wpilibsuite/opensdk/releases/download/v2025-2/cortexa9_vfpv3-roborio-academic-2025-x86_64-linux-gnu-Toolchain-12.1.0.tgz
          - os: ubuntu-latest
            target: arm64
            cross: true
            toolchain_url: https://github.com/wpilibsuite/opensdk/releases/download/v2025-2/arm64-bookworm-2025-x86_64-linux-gnu-Toolchain-12.2.0.tgz
    runs-on: ${{ matrix.os }}
    env:
      JAVA_VERSION: '17'
      TOOLCHAIN_ROOT: '${{ github.workspace }}/jni/toolchain'
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v2
      - name: Download toolchain
        if: ${{ matrix.cross }}
        run: |
          wget ${{ matrix.toolchain_url }} -O toolchain.tgz
          mkdir -p toolchain
          tar -xzf toolchain.tgz -C toolchain --strip-components=1
          rm toolchain.tgz
        working-directory: ./jni
      - name: Build native JNI library
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release${{ matrix.cross && format(' -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/{0}-toolchain.cmake', matrix.target) || '' }}
          cmake --build build --config Release
        working-directory: ./jni
      - name: Upload native library artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-${{ matrix.target }}
          path: |
            jni/build/jni/windows/x86-64/shared/ruckig_jni.dll
            jni/build/jni/linux/x86-64/shared/libruckig_jni.so
            jni/build/jni/linux/arm64/shared/libruckig_jni.so
            jni/build/jni/linux/athena/shared/libruckig_jni.so
            jni/build/jni/osx/universal/shared/libruckig_jni.dylib
          if-no-files-found: ignore

  publish-java:
    needs: build-native
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: '17'
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_ACTOR: ${{ github.actor }}
      GITHUB_REPOSITORY: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v4
      - name: Download all native artifacts
        uses: actions/download-artifact@v4
        with:
          path: native-libs
      - name: Move native libraries to build/jni
        run: |
          mkdir -p jni/build/jni/windows/x86-64/shared jni/build/jni/linux/x86-64/shared jni/build/jni/linux/arm64/shared jni/build/jni/linux/athena/shared jni/build/jni/osx/universal/shared
          rsync -a --include='*/' --include='ruckig_jni.dll' --include='libruckig_jni.so' --include='libruckig_jni.dylib' --exclude='*' native-libs/ jni/build/jni/
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      - name: Make gradlew executable
        run: chmod +x gradlew
        working-directory: ./jni
      - name: Build Java package
        run: ./gradlew build
        working-directory: ./jni
      - name: Publish Java package
        if: startsWith(github.ref, 'refs/tags/v')
        run: ./gradlew publish
        working-directory: ./jni
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
      - name: Publish JAR to Maven Central
        if: startsWith(github.ref, 'refs/tags/v')
        run: ./gradlew jreleaserDeploy
        working-directory: ./jni
        env:
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
          JRELEASER_NEXUS2_USERNAME: ${{ secrets.JRELEASER_NEXUS2_USERNAME }}
          JRELEASER_NEXUS2_PASSWORD: ${{ secrets.JRELEASER_NEXUS2_PASSWORD }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
