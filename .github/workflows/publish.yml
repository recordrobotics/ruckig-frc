name: Build and Publish JNI Library

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-native:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: windows
            cross: false
          - os: macos-latest
            target: macos
            cross: false
          - os: ubuntu-latest
            target: linux
            cross: false
          - os: ubuntu-latest
            target: athena
            cross: true
            toolchain_url: https://github.com/wpilibsuite/opensdk/releases/download/v2025-2/cortexa9_vfpv3-roborio-academic-2025-x86_64-linux-gnu-Toolchain-12.1.0.tgz
          - os: ubuntu-latest
            target: arm64
            cross: true
            toolchain_url: https://github.com/wpilibsuite/opensdk/releases/download/v2025-2/arm64-bookworm-2025-x86_64-linux-gnu-Toolchain-12.2.0.tgz
    runs-on: ${{ matrix.os }}
    env:
      JAVA_VERSION: '17'
      TOOLCHAIN_ROOT: '${{ github.workspace }}/jni/toolchain'
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v2
      - name: Download toolchain
        if: ${{ matrix.cross }}
        run: |
          wget -nv ${{ matrix.toolchain_url }} -O toolchain.tgz
          mkdir -p toolchain
          tar -xzf toolchain.tgz -C toolchain --strip-components=2
          rm toolchain.tgz
        working-directory: ./jni
      - name: Build native JNI library
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release${{ matrix.cross && format(' -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/{0}-toolchain.cmake', matrix.target) || '' }}
          cmake --build build --config Release
        working-directory: ./jni
      - name: Upload native library artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-${{ matrix.target }}
          path: |
            jni/build/jni/
          if-no-files-found: warn

  publish-java:
    needs: build-native
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: '17'
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_ACTOR: ${{ github.actor }}
      GITHUB_REPOSITORY: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v4
      - name: Download native library artifacts
        uses: actions/download-artifact@v4
        with:
          path: jni/build/jni
          pattern: 'native-*'
          merge-multiple: true
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      - name: Make gradlew executable
        run: chmod +x gradlew
        working-directory: ./jni
      - name: Build Java package
        run: ./gradlew build
        working-directory: ./jni
      - name: Publish Java package
        if: startsWith(github.ref, 'refs/tags/v')
        run: ./gradlew publish
        working-directory: ./jni
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
      - name: Upload local maven repository
        uses: actions/upload-artifact@v4
        with:
          name: maven-deploy
          path: |
            jni/build/deploy/
          if-no-files-found: warn
      # - name: Publish JAR to Maven Central
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   run: ./gradlew jreleaserDeploy
      #   working-directory: ./jni
      #   env:
      #     JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
      #     JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
      #     JRELEASER_NEXUS2_USERNAME: ${{ secrets.JRELEASER_NEXUS2_USERNAME }}
      #     JRELEASER_NEXUS2_PASSWORD: ${{ secrets.JRELEASER_NEXUS2_PASSWORD }}
      #     JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
      #     JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
      #     JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     GITHUB_ACTOR: ${{ github.actor }}
      #     GITHUB_REPOSITORY: ${{ github.repository }}
  
  local-deploy:
    needs: publish-java
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Download local maven repository
        uses: actions/download-artifact@v4
        with:
          path: docs/vendordep/vendordep/repos/releases
          name: maven-deploy
      - name: Generate directory indexes
        working-directory: ./docs
        run: |
          repo_name="${GITHUB_REPOSITORY##*/}"
          find ./ -type d | while read dir; do 
            # Remove leading ./
            relpath="${dir#./}"
            # If root, use repo name only
            if [ -z "$relpath" ]; then
              display_path="$repo_name"
            else
              display_path="$repo_name/$relpath"
            fi
            (
              echo '<!DOCTYPE html>'
              echo '<html>'
              echo ''
              echo '<head>'
              echo '  <title>Record Robotics Repository: '$display_path'</title>'
              echo '  <meta name="viewport" content="width=device-width, initial-scale=1.0">'

              echo '  <style>'
              echo 'body { background: #fff; }'
              echo '  </style>'
              echo '</head>'
              echo ''
              echo '<body>'
              echo '  <header>'
              echo '    <h1>'$display_path'</h1>'
              echo '  </header>'
              echo '  <hr/>'
              echo '  <main>'
              echo '    <pre id="contents">'
              echo '<a href="../">../</a>'
              for f in "$dir"/*; do
                [ -e "$f" ] || continue
                fname=$(basename "$f")
                [ "$fname" = "index.html" ] && continue
                mtime=$(date -u -r "$f" +"%Y-%m-%d %H:%M")
                if [ -d "$f" ]; then
                  fsize="-"
                else
                  fsize=$(stat -c %s "$f" 2>/dev/null || stat -f %z "$f" 2>/dev/null)
                fi
                printf '<a href="%s" title="%s">%s</a> %30s %10s\n' "$fname" "$fname" "$fname" "$mtime" "$fsize"
              done
              echo '    </pre>'
              echo '  </main>'
              echo '  <hr/>'
              echo '</body>'
              echo ''
              echo '</html>'
            ) > "$dir/index.html"
          done
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload docs/ repository
          path: './docs/'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4